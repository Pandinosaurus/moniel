Moniel{
    Network
        = Definition*
    Definition
        = (BlockDefinition | ConnectionDefinition)

    ConnectionDefinition
        = NonemptyListOf<(BlockList | Block), connectionSymbol>

    BlockList (block list)
        = "[" ListOf<Block, ","> "]"

    Block
        = BlockInstance | InlineBlockDefinition | blockIdentifier

    BlockInstance (block)
        = BlockName blockType BlockInstanceParameters
    BlockInstanceParameters
        = ("(" Parameters ")")?

    BlockName
        = (blockName ":")?

    BlockDefinition
        = "+" blockType BlockDefinitionParameters BlockDefinitionBody
    BlockDefinitionParameters
        = ("(" Parameters ")")?
    BlockDefinitionBody
        = ("{" Definition* "}")?

    InlineBlockDefinition
        = BlockName InlineBlockDefinitionBody
    InlineBlockDefinitionBody
        = ("{" Definition* "}")

    Parameters
        = ListOf<Parameter, ",">
    Parameter (parameter)
        =  parameterName "=" (ValueList | Value)

    ValueList
        = "<" ListOf<Value, ";"> ">"
    Value
        = parameterName | blockType | float | Shape | integer

    blockType (block name)
        = upper (alnum | "_")*
    blockName
        = lower (alnum | "_")*
    blockIdentifier (identifier)
        = "./"? lower (alnum | "_" | "/")*
    parameterName
        = letter+
    integer
        = digit+
    float
        = digit* "." digit+
    Shape
        = ListOf<integer, "x">
    connectionSymbol (->)
        = "->"
    space
        += comment

    comment
        = "//" (~"\n" any)* "\n"?   -- singleLine
        | "/*" (~"*/" any)* "*/"    -- multiLine
}